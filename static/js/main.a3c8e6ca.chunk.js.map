{"version":3,"sources":["assets/logan_nobg.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppWrapper","styled","div","Left","props","windowWidth","Right","SocialBar","Centerpiece","img","App","state","window","innerWidth","addEventListener","this","resize","bind","setState","style","color","fontWeight","fontSize","margin","padding","alt","src","Logan","href","target","rel","icon","faLaptopCode","faPencilAlt","faEthereum","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,wC,y6CCQ3C,IAAMC,EAAaC,IAAOC,IAAV,KAWVC,EAAOF,IAAOC,IAAV,KAQC,SAAAE,GAAK,OAAIA,EAAMC,YAAc,IAAM,MAAQ,UAUhDC,EAAQL,IAAOC,IAAV,KAQA,SAAAE,GAAK,OAAIA,EAAMC,YAAc,IAAM,MAAQ,UAGhDE,EAAYN,IAAOC,IAAV,KAGA,SAAAE,GAAK,OAAIA,EAAMC,YAAc,IAAM,OAAS,WAEhD,SAAAD,GAAK,OAAIA,EAAMC,YAAc,IAAM,MAAQ,SAWhDG,EAAcP,IAAOQ,IAAV,KA6EFC,E,YAvEb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXN,YAAaO,OAAOC,YAHV,E,iFAQZD,OAAOE,iBAAiB,SAAUC,KAAKC,OAAOC,KAAKF,OACnDA,KAAKC,W,+BAILD,KAAKG,SAAS,CAAEb,YAAaO,OAAOC,e,+BAIpC,OACE,kBAACb,EAAD,KAEE,kBAACM,EAAD,CAAOD,YAAaU,KAAKJ,MAAMN,aAC7B,wBAAIc,MAAO,CAAEC,MAAO,OAAQC,WAAY,MAAOC,SAAU,OAAQC,OAAQ,IAAKC,QAAS,MAAvF,iBACA,kBAAChB,EAAD,CAAaiB,IAAI,QAAQC,IAAKC,MAC9B,kBAACpB,EAAD,CAAWF,YAAaU,KAAKJ,MAAMN,aAEjC,uBAAGuB,KAAK,8BAA8BC,OAAO,SAASC,IAAI,uBACxD,kBAAC,IAAD,CAAiBC,KAAMC,OAIzB,uBAAGJ,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBACzD,kBAAC,IAAD,CAAiBC,KAAME,OAIzB,uBAAGL,KAAK,6CAA6CC,OAAO,SAASC,IAAI,uBACvE,kBAAC,IAAD,CAAiBC,KAAMG,SAK7B,kBAAC/B,EAAD,CAAME,YAAaU,KAAKJ,MAAMN,mB,GA1CpB8B,aC3DEC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a3c8e6ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logan_nobg.bb5f03df.svg\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faLaptopCode } from '@fortawesome/free-solid-svg-icons';\nimport { faEthereum } from '@fortawesome/free-brands-svg-icons';\n\nimport Logan from './assets/logan_nobg.svg';\n\nconst AppWrapper = styled.div`\n  background: red;\n  display: flex;\n  flex-flow: row-reverse wrap;\n  margin: 0;\n  padding: 0;\n  height: 100vh;\n  width: 100vw;\n  font-family: 'KoHo'\n`;\n\nconst Left = styled.div`\n  background: #FFF;\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: space-around;\n  align-items: center;\n  margin: 0;\n  padding: 0;\n  width: ${props => props.windowWidth > 760 ? '50%' : '100%'};\n  a {\n    color: #7B9EF6;\n    text-decoration: none;\n    :hover {\n      color: #3B00FF;\n    }\n  }\n`;\n\nconst Right = styled.div`\n  background: #000;\n  display: flex;\n  flex-flow: column;\n  justify-content: space-around;\n  align-items: center;\n  margin: 0;\n  padding: 0;\n  width: ${props => props.windowWidth > 760 ? '50%' : '100%'};\n`;\n\nconst SocialBar = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  font-size: ${props => props.windowWidth > 760 ? '30px' : '1.3em'};\n  color: #FFF;\n  width: ${props => props.windowWidth > 760 ? '50%' : '70%'};\n  justify-content: space-around;\n  a {\n    color: #FFF;\n    text-decoration: none;\n    :hover {\n      color: #7B9EF6;\n    }\n  }\n`;\n\nconst Centerpiece = styled.img`\n  height: 22em;\n  margin-top: -50px;\n`;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      windowWidth: window.innerWidth,\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    this.setState({ windowWidth: window.innerWidth });\n  }\n\n  render() {\n    return (\n      <AppWrapper>\n\n        <Right windowWidth={this.state.windowWidth}>\n          <h2 style={{ color: '#FFF', fontWeight: '600', fontSize: '36px', margin: '0', padding: '0' }}>Logan Saether</h2>\n          <Centerpiece alt=\"Logan\" src={Logan} />\n          <SocialBar windowWidth={this.state.windowWidth}>\n            {/* Code (GitHub) */}\n            <a href=\"https://github.com/lsaether\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <FontAwesomeIcon icon={faLaptopCode} />\n            </a>\n\n            {/* Writing (94arg.com) */}\n            <a href=\"https://medium.com/@lsaether\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <FontAwesomeIcon icon={faPencilAlt} />\n            </a>\n\n            {/* Ethereum Wallet (devops199.eth) */}\n            <a href=\"https://etherscan.io/address/devops199.eth\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <FontAwesomeIcon icon={faEthereum} />\n            </a>\n          </SocialBar>\n        </Right>\n\n        <Left windowWidth={this.state.windowWidth}>\n          {/* <h2>Current: </h2>\n          <a href=\"https://convergent.cx\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img alt=\"convergent\" src={convergent} style={{ height: '50px' }} />\n          </a>\n          <p style={{ fontSize: this.state.windowWidth > 760 ? '0.8em' : '0.7em', marginTop: '-2.5px' }}>Initiator</p>\n            \n          <a href=\"https://trustless.design\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img alt=\"trustless\" src={trustless} style={{ height: '50px', marginTop: '5px' }} />\n          </a>\n          <p style={{ fontSize: this.state.windowWidth > 760 ? '0.8em' : '0.7em', marginTop: '-2.5px' }}>Co-Founder and Auditor</p>\n\n          <h2>Past: </h2>\n          <a href=\"https://chronologic.network\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img alt=\"chronologic\" src={chrono} style={{ height: '50px' }} />\n          </a>\n          <p style={{ fontSize: this.state.windowWidth > 760 ? '0.8em' : '0.7em', marginTop: '-2.5px' }}>Smart Contract Engineer</p>\n\n          <h2>Recognitions: </h2>\n          <a href=\"https://medium.com/melonport-blog/reinventing-finance-53-hours-and-50-hackers-later-a18bdea1c5c1\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img alt=\"reinvent-finance\" src={reinvent} style={{ height: '50px' }} />\n          </a>\n          <p style={{ fontSize: this.state.windowWidth > 760 ? '0.8em' : '0.7em', marginTop: '-2.5px' }}>Grand Prize Winner</p> */}\n        </Left>\n\n      </AppWrapper>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}